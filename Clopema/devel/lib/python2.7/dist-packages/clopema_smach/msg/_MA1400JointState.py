"""autogenerated by genpy from clopema_smach/MA1400JointState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MA1400JointState(genpy.Message):
  _md5sum = "a3b3791f114f3a61c72e1b1a7e520805"
  _type = "clopema_smach/MA1400JointState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 s
float64 l
float64 u
float64 r
float64 b
float64 t

"""
  __slots__ = ['s','l','u','r','b','t']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s,l,u,r,b,t

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MA1400JointState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.s is None:
        self.s = 0.
      if self.l is None:
        self.l = 0.
      if self.u is None:
        self.u = 0.
      if self.r is None:
        self.r = 0.
      if self.b is None:
        self.b = 0.
      if self.t is None:
        self.t = 0.
    else:
      self.s = 0.
      self.l = 0.
      self.u = 0.
      self.r = 0.
      self.b = 0.
      self.t = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.s, _x.l, _x.u, _x.r, _x.b, _x.t))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.s, _x.l, _x.u, _x.r, _x.b, _x.t,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.s, _x.l, _x.u, _x.r, _x.b, _x.t))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.s, _x.l, _x.u, _x.r, _x.b, _x.t,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
