"""autogenerated by genpy from toradex/ToradexSetShutterRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import toradex.msg

class ToradexSetShutterRequest(genpy.Message):
  _md5sum = "890c63bccb9f8d0b9c94f356912df66f"
  _type = "toradex/ToradexSetShutterRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ToradexShutter shutter

================================================================================
MSG: toradex/ToradexShutter
bool shutter1
bool shutter2
bool shutter3

"""
  __slots__ = ['shutter']
  _slot_types = ['toradex/ToradexShutter']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       shutter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToradexSetShutterRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.shutter is None:
        self.shutter = toradex.msg.ToradexShutter()
    else:
      self.shutter = toradex.msg.ToradexShutter()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.shutter.shutter1, _x.shutter.shutter2, _x.shutter.shutter3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.shutter is None:
        self.shutter = toradex.msg.ToradexShutter()
      end = 0
      _x = self
      start = end
      end += 3
      (_x.shutter.shutter1, _x.shutter.shutter2, _x.shutter.shutter3,) = _struct_3B.unpack(str[start:end])
      self.shutter.shutter1 = bool(self.shutter.shutter1)
      self.shutter.shutter2 = bool(self.shutter.shutter2)
      self.shutter.shutter3 = bool(self.shutter.shutter3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.shutter.shutter1, _x.shutter.shutter2, _x.shutter.shutter3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.shutter is None:
        self.shutter = toradex.msg.ToradexShutter()
      end = 0
      _x = self
      start = end
      end += 3
      (_x.shutter.shutter1, _x.shutter.shutter2, _x.shutter.shutter3,) = _struct_3B.unpack(str[start:end])
      self.shutter.shutter1 = bool(self.shutter.shutter1)
      self.shutter.shutter2 = bool(self.shutter.shutter2)
      self.shutter.shutter3 = bool(self.shutter.shutter3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
"""autogenerated by genpy from toradex/ToradexSetShutterResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ToradexSetShutterResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "toradex/ToradexSetShutterResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToradexSetShutterResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class ToradexSetShutter(object):
  _type          = 'toradex/ToradexSetShutter'
  _md5sum = '890c63bccb9f8d0b9c94f356912df66f'
  _request_class  = ToradexSetShutterRequest
  _response_class = ToradexSetShutterResponse
